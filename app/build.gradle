buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco' // generate test coverage reports.
apply from: './config.gradle'
apply from: './dependencies.gradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId project.APPLICATION_ID
        targetSdkVersion versions.compileSdk
        minSdkVersion versions.minSdk
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        multiDexEnabled true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {

        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug

            testCoverageEnabled true

            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
        }
    }

    /*
     *  Filter useless variants (like "mockRelease")
     */
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
        exclude 'main/AndroidManifest.xml'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}
configurations {
    compile.exclude group: 'stax'
    compile.exclude group: 'xpp3'
}
// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

androidExtensions {
    experimental = true
}